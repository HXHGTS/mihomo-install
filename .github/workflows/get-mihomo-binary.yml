name: Get mihomo binary

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:

jobs:
  get-mihomo-binary:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Necessary Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl sed wget

      - name: Download Alpha Binary
        run: |
          MIHOMO_ALPHA_URL=$(curl -s https://api.github.com/repos/MetaCubeX/mihomo/releases/tags/Prerelease-Alpha | grep '.zip' | grep 'mihomo-windows-amd64-alpha-' | grep 'browser_download_url' | awk -F\" '{print $4}')
          MIHOMO_ALPHA_VERSION=$(echo ${MIHOMO_ALPHA_URL} | awk -F/ '{print $9}')
          wget -O mihomo-windows-amd64-alpha.zip ${MIHOMO_ALPHA_URL}

      - name: Download Latest Binary
        run: |
          MIHOMO_LATEST_URL=$(curl -s https://api.github.com/repos/MetaCubeX/mihomo/releases | grep 'browser_download_url' | grep 'mihomo-windows-amd64-' | grep -v 'alpha' | grep -v 'compatible' | grep -v 'go' | head -n 1 | awk -F\" '{print $4}')
          MIHOMO_LATEST_VERSION=$(echo ${MIHOMO_LATEST_URL} | awk -F/ '{print $9}')
          wget -O mihomo-windows-amd64.zip ${MIHOMO_LATEST_URL}

      - name: Prepare Binary Folder
        run: |
          mkdir -p binary
          mv -f mihomo-windows-amd64-alpha.zip mihomo-windows-amd64.zip binary

      - name: Push Files
        run: |
          git config --global user.email "${{ secrets.GH_EMAIL }}"
          git config --global user.name "github-actions[bot]"
          git add ./binary/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACTIONS_RUNNER_DEBUG: true
          ACTIONS_STEP_DEBUG: true

      - name: Create tag
        id: create_tag
        run: |
          TAG_NAME=$(date -u +"%Y%m%d%H%M%S")
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists, deleting it from remote."
            git push --delete origin "$TAG_NAME"
            while git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; do
              echo "Waiting for tag $TAG_NAME to be deleted..."
              sleep 5
            done
          fi
          git tag $TAG_NAME
          git push --force origin $TAG_NAME
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        id: create_release
        run: |
          TAG_NAME=${{ steps.create_tag.outputs.TAG_NAME }}
          RELEASE_ID=$(gh release view "$TAG_NAME" --json id --jq '.id' || echo "null")
          if [ "$RELEASE_ID" != "null" ]; then
            echo "Release $TAG_NAME already exists, deleting it."
            gh release delete "$TAG_NAME" --yes
          fi
          gh release create "$TAG_NAME" --title "$TAG_NAME" --notes "Auto-generated release for $TAG_NAME" ./binary/*
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
